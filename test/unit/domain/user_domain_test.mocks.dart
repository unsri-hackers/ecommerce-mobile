// Mocks generated by Mockito 5.0.10 from annotations
// in deuvox/test/unit/domain/user_domain_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:deuvox/data/domain/user_domain.dart' as _i3;
import 'package:deuvox/data/model/login_model.dart' as _i5;
import 'package:deuvox/data/model/user_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUserSessionModel extends _i1.Fake implements _i2.UserSessionModel {}

/// A class which mocks [UserDomain].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDomain extends _i1.Mock implements _i3.UserDomain {
  MockUserDomain() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> login(_i5.LoginModel? loginModel) =>
      (super.noSuchMethod(Invocation.method(#login, [loginModel]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.UserSessionModel> getCurrentSession() =>
      (super.noSuchMethod(Invocation.method(#getCurrentSession, []),
              returnValue:
                  Future<_i2.UserSessionModel>.value(_FakeUserSessionModel()))
          as _i4.Future<_i2.UserSessionModel>);
  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<bool> addSession(_i2.UserSessionModel? userModel) =>
      (super.noSuchMethod(Invocation.method(#addSession, [userModel]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> updateSession(_i2.UserSessionModel? userModel) =>
      (super.noSuchMethod(Invocation.method(#updateSession, [userModel]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
